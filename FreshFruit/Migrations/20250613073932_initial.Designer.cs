// <auto-generated />
using System;
using FreshFruit.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FreshFruit.Migrations
{
    [DbContext(typeof(FreshFruitDbContext))]
    [Migration("20250613073932_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FreshFruit.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_account");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("FreshFruit.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Slug")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("FreshFruit.Models.BlogImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogImages");
                });

            modelBuilder.Entity("FreshFruit.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("FreshFruit.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RatingId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("FreshFruit.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("InvoiceDate")
                        .HasColumnType("date");

                    b.Property<string>("InvoicesCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("FreshFruit.Models.InvoiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("FreshFruit.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("address");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nchar(150)")
                        .HasColumnName("email")
                        .IsFixedLength();

                    b.Property<string>("Fullname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fullname");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nchar(15)")
                        .HasColumnName("phone")
                        .IsFixedLength();

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_member");

                    b.HasIndex("AccountId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("FreshFruit.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategotyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ShipmentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Slug")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_product");

                    b.HasIndex("CategotyId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FreshFruit.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("FreshFruit.Models.PurchaseReceipt", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ReceiptDate")
                        .HasColumnType("date");

                    b.Property<string>("ShipmentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Supplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK_GoodsReceipt");

                    b.HasIndex("CreateBy");

                    b.ToTable("PurchaseReceipts");
                });

            modelBuilder.Entity("FreshFruit.Models.PurchaseReceiptDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("ImportPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReceiptId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("PurchaseReceiptDetails");
                });

            modelBuilder.Entity("FreshFruit.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating1")
                        .HasColumnType("int")
                        .HasColumnName("Rating");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProductId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("FreshFruit.Models.Blog", b =>
                {
                    b.HasOne("FreshFruit.Models.Account", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_Blogs_Accounts_01");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("FreshFruit.Models.BlogImage", b =>
                {
                    b.HasOne("FreshFruit.Models.Blog", "Blog")
                        .WithMany("BlogImages")
                        .HasForeignKey("BlogId")
                        .IsRequired()
                        .HasConstraintName("FK_BlogImages_Blogs");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("FreshFruit.Models.Comment", b =>
                {
                    b.HasOne("FreshFruit.Models.Rating", "Rating")
                        .WithMany("Comments")
                        .HasForeignKey("RatingId")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Rating");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("FreshFruit.Models.Invoice", b =>
                {
                    b.HasOne("FreshFruit.Models.Member", "Member")
                        .WithMany("Invoices")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoices_Members_01");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("FreshFruit.Models.InvoiceDetail", b =>
                {
                    b.HasOne("FreshFruit.Models.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceDetails_Invoices_01");

                    b.HasOne("FreshFruit.Models.Product", "Product")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceDetails_Products_01");

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FreshFruit.Models.Member", b =>
                {
                    b.HasOne("FreshFruit.Models.Account", "Account")
                        .WithMany("Members")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Members_Accounts_01");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FreshFruit.Models.Product", b =>
                {
                    b.HasOne("FreshFruit.Models.Category", "Categoty")
                        .WithMany("Products")
                        .HasForeignKey("CategotyId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_Categories_01");

                    b.Navigation("Categoty");
                });

            modelBuilder.Entity("FreshFruit.Models.ProductImage", b =>
                {
                    b.HasOne("FreshFruit.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductImages_Products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FreshFruit.Models.PurchaseReceipt", b =>
                {
                    b.HasOne("FreshFruit.Models.Account", "CreateByNavigation")
                        .WithMany("PurchaseReceipts")
                        .HasForeignKey("CreateBy")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseReceipts_Accounts_01");

                    b.Navigation("CreateByNavigation");
                });

            modelBuilder.Entity("FreshFruit.Models.PurchaseReceiptDetail", b =>
                {
                    b.HasOne("FreshFruit.Models.Product", "Product")
                        .WithMany("PurchaseReceiptDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseReceiptDetails_Products_01");

                    b.HasOne("FreshFruit.Models.PurchaseReceipt", "Receipt")
                        .WithMany("PurchaseReceiptDetails")
                        .HasForeignKey("ReceiptId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseReceiptDetails_Receipts_01");

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("FreshFruit.Models.Rating", b =>
                {
                    b.HasOne("FreshFruit.Models.Member", "Member")
                        .WithMany("Ratings")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Rating_Members");

                    b.HasOne("FreshFruit.Models.Product", "Product")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Rating_Products");

                    b.Navigation("Member");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FreshFruit.Models.Account", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Members");

                    b.Navigation("PurchaseReceipts");
                });

            modelBuilder.Entity("FreshFruit.Models.Blog", b =>
                {
                    b.Navigation("BlogImages");
                });

            modelBuilder.Entity("FreshFruit.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FreshFruit.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("FreshFruit.Models.Member", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("FreshFruit.Models.Product", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("PurchaseReceiptDetails");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("FreshFruit.Models.PurchaseReceipt", b =>
                {
                    b.Navigation("PurchaseReceiptDetails");
                });

            modelBuilder.Entity("FreshFruit.Models.Rating", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
